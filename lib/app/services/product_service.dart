import 'package:dio/dio.dart';
import 'package:get/get.dart';
import '../models/product.dart';
import 'api_service.dart';

class ProductService extends GetxService {
  final ApiService _apiService = Get.find<ApiService>();
  
  // Cache pour √©viter les appels r√©p√©t√©s
  List<Product>? _cachedProducts;
  
  /// R√©cup√©rer tous les produits
  Future<List<Product>> getAllProducts() async {
    try {
      print('=== R√âCUP√âRATION PRODUITS ===');
      
      // Utiliser le cache si disponible
      if (_cachedProducts != null) {
        print('üì¶ Utilisation du cache produits (${_cachedProducts!.length} produits)');
        return _cachedProducts!;
      }
      
      final response = await _apiService.dio.get('/api/product');
      print('‚úÖ R√©ponse API: ${response.data?.length ?? 0} produits');
      
      final List<dynamic> productsJson = response.data ?? [];
      final products = productsJson.map((json) => Product.fromJson(json)).toList();
      
      // Mise en cache
      _cachedProducts = products;
      
      print('üìù Produits pars√©s: ${products.length}');
      return products;
      
    } on DioException catch (e) {
      print('‚ùå Erreur Dio r√©cup√©ration produits: ${e.response?.statusCode}');
      print('Response data: ${e.response?.data}');
      
      if (e.response?.statusCode == 403) {
        throw Exception('Acc√®s refus√© : permissions insuffisantes pour voir les produits');
      } else if (e.response?.statusCode == 404) {
        throw Exception('Endpoint produits non trouv√©');
      } else {
        throw Exception('Erreur serveur lors de la r√©cup√©ration des produits');
      }
    } catch (e) {
      print('‚ùå Erreur g√©n√©rale produits: $e');
      throw Exception('Erreur inattendue: $e');
    }
  }
  
  /// Obtenir les cat√©gories disponibles
  Future<List<String>> getAvailableCategories() async {
    try {
      final products = await getAllProducts();
      
      final categories = products
          .map((p) => p.productCategoryCode)
          .toSet()
          .toList();
      
      categories.sort(); // Tri alphab√©tique
      
      print('üìÇ Cat√©gories disponibles: ${categories.length}');
      return categories;
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration cat√©gories: $e');
      throw Exception('Erreur lors de la r√©cup√©ration des cat√©gories');
    }
  }
  
  /// Vider le cache
  void clearCache() {
    print('üóëÔ∏è Nettoyage cache produits');
    _cachedProducts = null;
  }
}